// Utility functions for searching mines and geospatial data

import {
  activeMinesData,
  potentialZonesData,
  riskZonesData,
} from "../mockData/mineData.js";

// Define GeoJSON feature type
interface GeoJSONFeature {
  type: string;
  properties: {
    id: number;
    name: string;
    [key: string]: string | number | boolean;
  };
  geometry: {
    type: string;
    coordinates: number[] | number[][] | number[][][];
  };
}

// Define types for search
export interface SearchResult {
  id: number;
  name: string;
  type: "mine" | "potential" | "risk";
  properties: Record<string, string | number | boolean>;
  geometry: {
    type: string;
    coordinates: number[] | number[][] | number[][][];
  };
}

/**
 * Search across all geospatial data (mines, potential zones, risk zones)
 * @param query The search term to look for
 * @returns Array of matched search results
 */
export const searchAllData = (query: string): SearchResult[] => {
  if (!query || query.trim() === "") {
    return [];
  }

  // Convert query to lowercase for case-insensitive search
  const searchTerm = query.toLowerCase();
  const results: SearchResult[] = [];

  // Search in active mines
  activeMinesData.features.forEach((feature: GeoJSONFeature) => {
    const name = feature.properties.name.toLowerCase();
    const mineral = String(feature.properties.mineral).toLowerCase();
    const company = String(feature.properties.company || "").toLowerCase();

    if (
      name.includes(searchTerm) ||
      mineral.includes(searchTerm) ||
      company.includes(searchTerm)
    ) {
      results.push({
        id: feature.properties.id,
        name: feature.properties.name,
        type: "mine",
        properties: feature.properties,
        geometry: feature.geometry,
      });
    }
  });

  // Search in potential zones
  potentialZonesData.features.forEach((feature: GeoJSONFeature) => {
    const name = feature.properties.name.toLowerCase();
    const mineral = String(feature.properties.mineral).toLowerCase();

    if (name.includes(searchTerm) || mineral.includes(searchTerm)) {
      results.push({
        id: feature.properties.id,
        name: feature.properties.name,
        type: "potential",
        properties: feature.properties,
        geometry: feature.geometry,
      });
    }
  });

  // Search in risk zones
  riskZonesData.features.forEach((feature: GeoJSONFeature) => {
    const name = feature.properties.name.toLowerCase();
    const riskType = String(feature.properties.risk_type).toLowerCase();

    if (name.includes(searchTerm) || riskType.includes(searchTerm)) {
      results.push({
        id: feature.properties.id,
        name: feature.properties.name,
        type: "risk",
        properties: feature.properties,
        geometry: feature.geometry,
      });
    }
  });

  return results;
};

/**
 * Get color and icon for different search result types
 * @param type The type of search result
 * @returns Object with color and icon name
 */
export const getSearchResultTypeInfo = (
  type: "mine" | "potential" | "risk"
) => {
  switch (type) {
    case "mine":
      return { color: "orange", icon: "‚õèÔ∏è" };
    case "potential":
      return { color: "green", icon: "üîç" };
    case "risk":
      return { color: "red", icon: "‚ö†Ô∏è" };
    default:
      return { color: "gray", icon: "‚ùì" };
  }
};

/**
 * Format properties into human-readable strings based on result type
 * @param result The search result to format
 * @returns Object with formatted properties
 */
export const formatSearchResultDetails = (result: SearchResult) => {
  if (result.type === "mine") {
    return {
      title: `‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á: ${result.name}`,
      details: [
        { label: "‡πÅ‡∏£‡πà", value: result.properties.mineral },
        { label: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", value: result.properties.company },
        {
          label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
          value: result.properties.status === "active" ? "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏õ‡∏¥‡∏î",
        },
        {
          label: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
          value: `${result.properties.impact_score}/10`,
        },
        {
          label: "‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
          value: `‡∏õ‡∏µ ${result.properties.year_opened}`,
        },
      ],
    };
  } else if (result.type === "potential") {
    return {
      title: `‡πÇ‡∏ã‡∏ô‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û: ${result.name}`,
      details: [
        { label: "‡πÅ‡∏£‡πà", value: result.properties.mineral },
        {
          label: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û",
          value: `${result.properties.potential_score}/10`,
        },
        { label: "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏≥‡∏£‡∏≠‡∏á", value: result.properties.estimated_reserves },
      ],
    };
  } else if (result.type === "risk") {
    return {
      title: `‡πÇ‡∏ã‡∏ô‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${result.name}`,
      details: [
        { label: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", value: result.properties.risk_type },
        { label: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", value: result.properties.risk_level },
        {
          label: "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
          value: result.properties.affected_villages,
        },
        { label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", value: result.properties.reported_date },
      ],
    };
  }

  return { title: result.name, details: [] };
};
